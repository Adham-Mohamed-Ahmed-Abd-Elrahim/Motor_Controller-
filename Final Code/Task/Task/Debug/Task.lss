
Task.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000a28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000a28  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a28  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009f4  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000079d  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000526  00000000  00000000  00001cc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000164  00000000  00000000  000021e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a4  00000000  00000000  0000234c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000660  00000000  00000000  000027f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  00002e50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  88:	0c 94 d8 04 	jmp	0x9b0	; 0x9b0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <HARDWARE_INIT>:
 *  Author: ADHM
 */ 
#include "Gpio.h"
void HARDWARE_INIT()
{
		SET_BIT(DDRB,OC1A);	SET_BIT(DDRB,OC1B);
  90:	21 9a       	sbi	0x04, 1	; 4
  92:	22 9a       	sbi	0x04, 2	; 4
  94:	08 95       	ret

00000096 <__vector_13>:


#include <avr/interrupt.h>
//volatile uint16_t ticks=0;
ISR(TIMER1_OVF_vect)
{
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	0f 93       	push	r16
  a2:	1f 93       	push	r17
  a4:	2f 93       	push	r18
  a6:	3f 93       	push	r19
  a8:	4f 93       	push	r20
  aa:	5f 93       	push	r21
  ac:	6f 93       	push	r22
  ae:	7f 93       	push	r23
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	af 93       	push	r26
  b6:	bf 93       	push	r27
  b8:	ef 93       	push	r30
  ba:	ff 93       	push	r31
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	00 d0       	rcall	.+0      	; 0xc2 <__vector_13+0x2c>
  c2:	00 d0       	rcall	.+0      	; 0xc4 <__vector_13+0x2e>
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
	//Variable stores the value to synchronize wave TRANSMISION B with A 
volatile uint32_t val=GET_SYNC_VAL;
  c8:	06 e8       	ldi	r16, 0x86	; 134
  ca:	10 e0       	ldi	r17, 0x00	; 0
  cc:	f8 01       	movw	r30, r16
  ce:	80 81       	ld	r24, Z
  d0:	91 81       	ldd	r25, Z+1	; 0x01
  d2:	20 91 88 00 	lds	r18, 0x0088	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
  d6:	30 91 89 00 	lds	r19, 0x0089	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
  da:	82 1b       	sub	r24, r18
  dc:	93 0b       	sbc	r25, r19
  de:	a0 e0       	ldi	r26, 0x00	; 0
  e0:	b0 e0       	ldi	r27, 0x00	; 0
  e2:	89 83       	std	Y+1, r24	; 0x01
  e4:	9a 83       	std	Y+2, r25	; 0x02
  e6:	ab 83       	std	Y+3, r26	; 0x03
  e8:	bc 83       	std	Y+4, r27	; 0x04
	//make a delay for dead time 
	DEAD_TIME1(10,PRE_8);
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	8a e0       	ldi	r24, 0x0A	; 10
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <DEAD_TIME1>
	//Setting B with OUTPUT MODE
	TIMERB_SET(NON_INVERTED);
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	0e 94 b4 00 	call	0x168	; 0x168 <TIMERB_SET>
	//Synchronize a with b 
     SYNC_B(val) ;
  fa:	f8 01       	movw	r30, r16
  fc:	80 81       	ld	r24, Z
  fe:	91 81       	ldd	r25, Z+1	; 0x01
 100:	49 81       	ldd	r20, Y+1	; 0x01
 102:	5a 81       	ldd	r21, Y+2	; 0x02
 104:	6b 81       	ldd	r22, Y+3	; 0x03
 106:	7c 81       	ldd	r23, Y+4	; 0x04
 108:	84 1b       	sub	r24, r20
 10a:	95 0b       	sbc	r25, r21
 10c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
 110:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
		//ticks=0;
	
	
	
}
 114:	0f 90       	pop	r0
 116:	0f 90       	pop	r0
 118:	0f 90       	pop	r0
 11a:	0f 90       	pop	r0
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	ff 91       	pop	r31
 122:	ef 91       	pop	r30
 124:	bf 91       	pop	r27
 126:	af 91       	pop	r26
 128:	9f 91       	pop	r25
 12a:	8f 91       	pop	r24
 12c:	7f 91       	pop	r23
 12e:	6f 91       	pop	r22
 130:	5f 91       	pop	r21
 132:	4f 91       	pop	r20
 134:	3f 91       	pop	r19
 136:	2f 91       	pop	r18
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <main>:

int main(void)
{  
	TIMER_INIT(PRE_8,MODE10,5000);
 146:	48 e8       	ldi	r20, 0x88	; 136
 148:	53 e1       	ldi	r21, 0x13	; 19
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	0e 94 38 01 	call	0x270	; 0x270 <TIMER_INIT>
	//GENERATE WAVE AT A WITH A SPECIFIC DUTY CYCLE
	GENERATE_WAVEA(50,INVERTED);
 152:	61 e0       	ldi	r22, 0x01	; 1
 154:	82 e3       	ldi	r24, 0x32	; 50
 156:	0e 94 83 02 	call	0x506	; 0x506 <GENERATE_WAVEA>
	

    while (1) 
    {	
		//RESet ICR1 for the aimed frequency 
GET_FREQUENCY(8,5000);
 15a:	e6 e8       	ldi	r30, 0x86	; 134
 15c:	f0 e0       	ldi	r31, 0x00	; 0
 15e:	84 e6       	ldi	r24, 0x64	; 100
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	91 83       	std	Z+1, r25	; 0x01
 164:	80 83       	st	Z, r24
 166:	fd cf       	rjmp	.-6      	; 0x162 <main+0x1c>

00000168 <TIMERB_SET>:
		}
	}
		//Setting Timer B output mode
		void TIMERB_SET(uint8_t OUTPUT_MODE)
		{
			switch (OUTPUT_MODE)
 168:	88 23       	and	r24, r24
 16a:	19 f0       	breq	.+6      	; 0x172 <TIMERB_SET+0xa>
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	51 f0       	breq	.+20     	; 0x184 <TIMERB_SET+0x1c>
 170:	12 c0       	rjmp	.+36     	; 0x196 <TIMERB_SET+0x2e>
			
			{
				case NON_INVERTED:CLR_BIT(TCCR1A,COM1B0); SET_BIT(TCCR1A,COM1B1); break;
 172:	e0 e8       	ldi	r30, 0x80	; 128
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	8f 7e       	andi	r24, 0xEF	; 239
 17a:	80 83       	st	Z, r24
 17c:	80 81       	ld	r24, Z
 17e:	80 62       	ori	r24, 0x20	; 32
 180:	80 83       	st	Z, r24
 182:	08 95       	ret
				case INVERTED:
				SET_BIT(TCCR1A,COM1B0); SET_BIT(TCCR1A,COM1B1);break;
 184:	e0 e8       	ldi	r30, 0x80	; 128
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	80 61       	ori	r24, 0x10	; 16
 18c:	80 83       	st	Z, r24
 18e:	80 81       	ld	r24, Z
 190:	80 62       	ori	r24, 0x20	; 32
 192:	80 83       	st	Z, r24
 194:	08 95       	ret
				// Non_INVERTED as default
				default: CLR_BIT(TCCR1A,COM1B0); SET_BIT(TCCR1A,COM1B1); break;
 196:	e0 e8       	ldi	r30, 0x80	; 128
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	8f 7e       	andi	r24, 0xEF	; 239
 19e:	80 83       	st	Z, r24
 1a0:	80 81       	ld	r24, Z
 1a2:	80 62       	ori	r24, 0x20	; 32
 1a4:	80 83       	st	Z, r24
 1a6:	08 95       	ret

000001a8 <DEAD_TIME1>:
		}
		
	

void DEAD_TIME1(uint16_t TIME_US,uint8_t prescale)
		{
 1a8:	cf 92       	push	r12
 1aa:	df 92       	push	r13
 1ac:	ef 92       	push	r14
 1ae:	ff 92       	push	r15
			 double ticks;
			//Calculating delay
			switch(prescale)
 1b0:	62 30       	cpi	r22, 0x02	; 2
 1b2:	e9 f0       	breq	.+58     	; 0x1ee <DEAD_TIME1+0x46>
 1b4:	28 f4       	brcc	.+10     	; 0x1c0 <DEAD_TIME1+0x18>
 1b6:	66 23       	and	r22, r22
 1b8:	41 f0       	breq	.+16     	; 0x1ca <DEAD_TIME1+0x22>
 1ba:	61 30       	cpi	r22, 0x01	; 1
 1bc:	91 f0       	breq	.+36     	; 0x1e2 <DEAD_TIME1+0x3a>
 1be:	3b c0       	rjmp	.+118    	; 0x236 <DEAD_TIME1+0x8e>
 1c0:	63 30       	cpi	r22, 0x03	; 3
 1c2:	09 f1       	breq	.+66     	; 0x206 <DEAD_TIME1+0x5e>
 1c4:	64 30       	cpi	r22, 0x04	; 4
 1c6:	59 f1       	breq	.+86     	; 0x21e <DEAD_TIME1+0x76>
 1c8:	36 c0       	rjmp	.+108    	; 0x236 <DEAD_TIME1+0x8e>
		   {case PRE_1:   ticks=GET_TICKS(TIME_US,1);break;
 1ca:	bc 01       	movw	r22, r24
 1cc:	80 e0       	ldi	r24, 0x00	; 0
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 98 03 	call	0x730	; 0x730 <__floatunsisf>
 1d4:	20 e0       	ldi	r18, 0x00	; 0
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	51 e4       	ldi	r21, 0x41	; 65
 1dc:	0e 94 26 04 	call	0x84c	; 0x84c <__mulsf3>
 1e0:	2d c0       	rjmp	.+90     	; 0x23c <DEAD_TIME1+0x94>
			   case PRE_8:   ticks=GET_TICKS(TIME_US,8);break;
 1e2:	bc 01       	movw	r22, r24
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 98 03 	call	0x730	; 0x730 <__floatunsisf>
 1ec:	27 c0       	rjmp	.+78     	; 0x23c <DEAD_TIME1+0x94>
			   case PRE_64:   ticks=GET_TICKS(TIME_US,64);break;
 1ee:	bc 01       	movw	r22, r24
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 98 03 	call	0x730	; 0x730 <__floatunsisf>
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	40 e0       	ldi	r20, 0x00	; 0
 1fe:	5e e3       	ldi	r21, 0x3E	; 62
 200:	0e 94 26 04 	call	0x84c	; 0x84c <__mulsf3>
 204:	1b c0       	rjmp	.+54     	; 0x23c <DEAD_TIME1+0x94>
			   case PRE_256:   ticks=GET_TICKS(TIME_US,256);break;
 206:	bc 01       	movw	r22, r24
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 98 03 	call	0x730	; 0x730 <__floatunsisf>
 210:	20 e0       	ldi	r18, 0x00	; 0
 212:	30 e0       	ldi	r19, 0x00	; 0
 214:	40 e0       	ldi	r20, 0x00	; 0
 216:	5d e3       	ldi	r21, 0x3D	; 61
 218:	0e 94 26 04 	call	0x84c	; 0x84c <__mulsf3>
 21c:	0f c0       	rjmp	.+30     	; 0x23c <DEAD_TIME1+0x94>
			   case PRE_1024:ticks=GET_TICKS(TIME_US,1024);break;
 21e:	bc 01       	movw	r22, r24
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 98 03 	call	0x730	; 0x730 <__floatunsisf>
 228:	29 e1       	ldi	r18, 0x19	; 25
 22a:	32 e0       	ldi	r19, 0x02	; 2
 22c:	40 e0       	ldi	r20, 0x00	; 0
 22e:	53 e4       	ldi	r21, 0x43	; 67
 230:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__divsf3>
 234:	03 c0       	rjmp	.+6      	; 0x23c <DEAD_TIME1+0x94>
			   default:ticks=0;break;
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	cb 01       	movw	r24, r22
		}
		
		ICR1=(HOLD-(int)ticks);
 23c:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <_edata>
 240:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <_edata+0x1>
 244:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <_edata+0x2>
 248:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <_edata+0x3>
 24c:	0e 94 62 03 	call	0x6c4	; 0x6c4 <__fixsfsi>
 250:	c6 1a       	sub	r12, r22
 252:	d7 0a       	sbc	r13, r23
 254:	d0 92 87 00 	sts	0x0087, r13	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 258:	c0 92 86 00 	sts	0x0086, r12	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
		}
 25c:	ff 90       	pop	r15
 25e:	ef 90       	pop	r14
 260:	df 90       	pop	r13
 262:	cf 90       	pop	r12
 264:	08 95       	ret

00000266 <INTERRUPT_INI>:
	//Co_Functions 
	//INterrupt enable 
 void  INTERRUPT_INI()
{
	
	TIMSK1 = (1 << TOIE1) ;
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
	sei();
 26c:	78 94       	sei
 26e:	08 95       	ret

00000270 <TIMER_INIT>:
static volatile long HOLD;



void TIMER_INIT(uint8_t PRESCALE,uint8_t mode,uint16_t frequency)
{ 
 270:	0f 93       	push	r16
 272:	1f 93       	push	r17
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	c8 2f       	mov	r28, r24
 27a:	d6 2f       	mov	r29, r22
 27c:	8a 01       	movw	r16, r20
	
	//MAKE OC1A OC1B AS OUTPUT
     HARDWARE_INIT();
 27e:	0e 94 48 00 	call	0x90	; 0x90 <HARDWARE_INIT>
	//enable force compare match FOR TIMER 1 A,B
	SET_BIT(TCCR1C,FOC1A);	SET_BIT(TCCR1C,FOC1B);
 282:	e2 e8       	ldi	r30, 0x82	; 130
 284:	f0 e0       	ldi	r31, 0x00	; 0
 286:	80 81       	ld	r24, Z
 288:	80 68       	ori	r24, 0x80	; 128
 28a:	80 83       	st	Z, r24
 28c:	80 81       	ld	r24, Z
 28e:	80 64       	ori	r24, 0x40	; 64
 290:	80 83       	st	Z, r24

	
	
	//SETTING FOR PHASE CORRECT MODE MODE 11(VARIABLE FREQUENCY) OR MODE 10
	switch(mode)
 292:	dd 23       	and	r29, r29
 294:	19 f0       	breq	.+6      	; 0x29c <TIMER_INIT+0x2c>
 296:	d1 30       	cpi	r29, 0x01	; 1
 298:	91 f0       	breq	.+36     	; 0x2be <TIMER_INIT+0x4e>
 29a:	22 c0       	rjmp	.+68     	; 0x2e0 <TIMER_INIT+0x70>
	{//TOP=ICR1
	case MODE10:CLR_BIT(TCCR1A,WGM10);SET_BIT(TCCR1A,WGM11);CLR_BIT(TCCR1B,WGM12);SET_BIT(TCCR1B,WGM13);break;
 29c:	e0 e8       	ldi	r30, 0x80	; 128
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	8e 7f       	andi	r24, 0xFE	; 254
 2a4:	80 83       	st	Z, r24
 2a6:	80 81       	ld	r24, Z
 2a8:	82 60       	ori	r24, 0x02	; 2
 2aa:	80 83       	st	Z, r24
 2ac:	e1 e8       	ldi	r30, 0x81	; 129
 2ae:	f0 e0       	ldi	r31, 0x00	; 0
 2b0:	80 81       	ld	r24, Z
 2b2:	87 7f       	andi	r24, 0xF7	; 247
 2b4:	80 83       	st	Z, r24
 2b6:	80 81       	ld	r24, Z
 2b8:	80 61       	ori	r24, 0x10	; 16
 2ba:	80 83       	st	Z, r24
 2bc:	21 c0       	rjmp	.+66     	; 0x300 <TIMER_INIT+0x90>
	//TOP=OCR1A
	case MODE11:SET_BIT(TCCR1A,WGM10);SET_BIT(TCCR1A,WGM11);CLR_BIT(TCCR1B,WGM12);SET_BIT(TCCR1B,WGM13);break;
 2be:	e0 e8       	ldi	r30, 0x80	; 128
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	80 81       	ld	r24, Z
 2c4:	81 60       	ori	r24, 0x01	; 1
 2c6:	80 83       	st	Z, r24
 2c8:	80 81       	ld	r24, Z
 2ca:	82 60       	ori	r24, 0x02	; 2
 2cc:	80 83       	st	Z, r24
 2ce:	e1 e8       	ldi	r30, 0x81	; 129
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	80 81       	ld	r24, Z
 2d4:	87 7f       	andi	r24, 0xF7	; 247
 2d6:	80 83       	st	Z, r24
 2d8:	80 81       	ld	r24, Z
 2da:	80 61       	ori	r24, 0x10	; 16
 2dc:	80 83       	st	Z, r24
 2de:	10 c0       	rjmp	.+32     	; 0x300 <TIMER_INIT+0x90>
	//default Mode 10
	default:CLR_BIT(TCCR1A,WGM10);SET_BIT(TCCR1A,WGM11);CLR_BIT(TCCR1B,WGM12);SET_BIT(TCCR1B,WGM13);break;
 2e0:	e0 e8       	ldi	r30, 0x80	; 128
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	8e 7f       	andi	r24, 0xFE	; 254
 2e8:	80 83       	st	Z, r24
 2ea:	80 81       	ld	r24, Z
 2ec:	82 60       	ori	r24, 0x02	; 2
 2ee:	80 83       	st	Z, r24
 2f0:	e1 e8       	ldi	r30, 0x81	; 129
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	80 81       	ld	r24, Z
 2f6:	87 7f       	andi	r24, 0xF7	; 247
 2f8:	80 83       	st	Z, r24
 2fa:	80 81       	ld	r24, Z
 2fc:	80 61       	ori	r24, 0x10	; 16
 2fe:	80 83       	st	Z, r24
	}
	//SET_BIT(TCCR1A,COM1A0); SET_BIT(TCCR1A,COM1A1); 

	
	switch(PRESCALE)
 300:	c2 30       	cpi	r28, 0x02	; 2
 302:	09 f4       	brne	.+2      	; 0x306 <TIMER_INIT+0x96>
 304:	5b c0       	rjmp	.+182    	; 0x3bc <TIMER_INIT+0x14c>
 306:	28 f4       	brcc	.+10     	; 0x312 <TIMER_INIT+0xa2>
 308:	cc 23       	and	r28, r28
 30a:	51 f0       	breq	.+20     	; 0x320 <TIMER_INIT+0xb0>
 30c:	c1 30       	cpi	r28, 0x01	; 1
 30e:	79 f1       	breq	.+94     	; 0x36e <TIMER_INIT+0xfe>
 310:	cd c0       	rjmp	.+410    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 312:	c3 30       	cpi	r28, 0x03	; 3
 314:	09 f4       	brne	.+2      	; 0x318 <TIMER_INIT+0xa8>
 316:	75 c0       	rjmp	.+234    	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 318:	c4 30       	cpi	r28, 0x04	; 4
 31a:	09 f4       	brne	.+2      	; 0x31e <TIMER_INIT+0xae>
 31c:	95 c0       	rjmp	.+298    	; 0x448 <__LOCK_REGION_LENGTH__+0x48>
 31e:	c6 c0       	rjmp	.+396    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
	{    case PRE_1:  SET_BIT(TCCR1B,CS10);CLR_BIT(TCCR1B,CS11); CLR_BIT(TCCR1B,CS12);
 320:	e1 e8       	ldi	r30, 0x81	; 129
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	81 60       	ori	r24, 0x01	; 1
 328:	80 83       	st	Z, r24
 32a:	80 81       	ld	r24, Z
 32c:	8d 7f       	andi	r24, 0xFD	; 253
 32e:	80 83       	st	Z, r24
 330:	80 81       	ld	r24, Z
 332:	8b 7f       	andi	r24, 0xFB	; 251
 334:	80 83       	st	Z, r24
		 ICR1=GET_FREQUENCY(1,frequency);	HOLD=ICR1;break;
 336:	98 01       	movw	r18, r16
 338:	40 e0       	ldi	r20, 0x00	; 0
 33a:	50 e0       	ldi	r21, 0x00	; 0
 33c:	60 e0       	ldi	r22, 0x00	; 0
 33e:	79 e0       	ldi	r23, 0x09	; 9
 340:	8d e3       	ldi	r24, 0x3D	; 61
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 a7 04 	call	0x94e	; 0x94e <__udivmodsi4>
 348:	e6 e8       	ldi	r30, 0x86	; 134
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	31 83       	std	Z+1, r19	; 0x01
 34e:	20 83       	st	Z, r18
 350:	31 83       	std	Z+1, r19	; 0x01
 352:	20 83       	st	Z, r18
 354:	80 81       	ld	r24, Z
 356:	91 81       	ldd	r25, Z+1	; 0x01
 358:	a0 e0       	ldi	r26, 0x00	; 0
 35a:	b0 e0       	ldi	r27, 0x00	; 0
 35c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 360:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 364:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
 368:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
 36c:	c5 c0       	rjmp	.+394    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
		case PRE_8: CLR_BIT(TCCR1B,CS10);SET_BIT(TCCR1B,CS11); CLR_BIT(TCCR1B,CS12); 
 36e:	e1 e8       	ldi	r30, 0x81	; 129
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	80 81       	ld	r24, Z
 374:	8e 7f       	andi	r24, 0xFE	; 254
 376:	80 83       	st	Z, r24
 378:	80 81       	ld	r24, Z
 37a:	82 60       	ori	r24, 0x02	; 2
 37c:	80 83       	st	Z, r24
 37e:	80 81       	ld	r24, Z
 380:	8b 7f       	andi	r24, 0xFB	; 251
 382:	80 83       	st	Z, r24
		ICR1=GET_FREQUENCY(8,frequency);
 384:	98 01       	movw	r18, r16
 386:	40 e0       	ldi	r20, 0x00	; 0
 388:	50 e0       	ldi	r21, 0x00	; 0
 38a:	60 e2       	ldi	r22, 0x20	; 32
 38c:	71 ea       	ldi	r23, 0xA1	; 161
 38e:	87 e0       	ldi	r24, 0x07	; 7
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 a7 04 	call	0x94e	; 0x94e <__udivmodsi4>
 396:	e6 e8       	ldi	r30, 0x86	; 134
 398:	f0 e0       	ldi	r31, 0x00	; 0
 39a:	31 83       	std	Z+1, r19	; 0x01
 39c:	20 83       	st	Z, r18
 39e:	31 83       	std	Z+1, r19	; 0x01
 3a0:	20 83       	st	Z, r18
		 HOLD=ICR1;
 3a2:	80 81       	ld	r24, Z
 3a4:	91 81       	ldd	r25, Z+1	; 0x01
 3a6:	a0 e0       	ldi	r26, 0x00	; 0
 3a8:	b0 e0       	ldi	r27, 0x00	; 0
 3aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 3ae:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 3b2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
 3b6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
		  break;
 3ba:	9e c0       	rjmp	.+316    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
		case PRE_64:SET_BIT(TCCR1B,CS10);SET_BIT(TCCR1B,CS11); CLR_BIT(TCCR1B,CS12);  
 3bc:	e1 e8       	ldi	r30, 0x81	; 129
 3be:	f0 e0       	ldi	r31, 0x00	; 0
 3c0:	80 81       	ld	r24, Z
 3c2:	81 60       	ori	r24, 0x01	; 1
 3c4:	80 83       	st	Z, r24
 3c6:	80 81       	ld	r24, Z
 3c8:	82 60       	ori	r24, 0x02	; 2
 3ca:	80 83       	st	Z, r24
 3cc:	80 81       	ld	r24, Z
 3ce:	8b 7f       	andi	r24, 0xFB	; 251
 3d0:	80 83       	st	Z, r24
		 ICR1=GET_FREQUENCY(64,frequency); HOLD=ICR1; break;
 3d2:	84 e2       	ldi	r24, 0x24	; 36
 3d4:	94 ef       	ldi	r25, 0xF4	; 244
 3d6:	b8 01       	movw	r22, r16
 3d8:	0e 94 93 04 	call	0x926	; 0x926 <__udivmodhi4>
 3dc:	e6 e8       	ldi	r30, 0x86	; 134
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	71 83       	std	Z+1, r23	; 0x01
 3e2:	60 83       	st	Z, r22
 3e4:	71 83       	std	Z+1, r23	; 0x01
 3e6:	60 83       	st	Z, r22
 3e8:	80 81       	ld	r24, Z
 3ea:	91 81       	ldd	r25, Z+1	; 0x01
 3ec:	a0 e0       	ldi	r26, 0x00	; 0
 3ee:	b0 e0       	ldi	r27, 0x00	; 0
 3f0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 3f4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 3f8:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
 3fc:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
 400:	7b c0       	rjmp	.+246    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
		case PRE_256:CLR_BIT(TCCR1B,CS10);CLR_BIT(TCCR1B,CS11); SET_BIT(TCCR1B,CS12); 
 402:	e1 e8       	ldi	r30, 0x81	; 129
 404:	f0 e0       	ldi	r31, 0x00	; 0
 406:	80 81       	ld	r24, Z
 408:	8e 7f       	andi	r24, 0xFE	; 254
 40a:	80 83       	st	Z, r24
 40c:	80 81       	ld	r24, Z
 40e:	8d 7f       	andi	r24, 0xFD	; 253
 410:	80 83       	st	Z, r24
 412:	80 81       	ld	r24, Z
 414:	84 60       	ori	r24, 0x04	; 4
 416:	80 83       	st	Z, r24
		 ICR1=GET_FREQUENCY(256,frequency); HOLD=ICR1; break;
 418:	89 e0       	ldi	r24, 0x09	; 9
 41a:	9d e3       	ldi	r25, 0x3D	; 61
 41c:	b8 01       	movw	r22, r16
 41e:	0e 94 93 04 	call	0x926	; 0x926 <__udivmodhi4>
 422:	e6 e8       	ldi	r30, 0x86	; 134
 424:	f0 e0       	ldi	r31, 0x00	; 0
 426:	71 83       	std	Z+1, r23	; 0x01
 428:	60 83       	st	Z, r22
 42a:	71 83       	std	Z+1, r23	; 0x01
 42c:	60 83       	st	Z, r22
 42e:	80 81       	ld	r24, Z
 430:	91 81       	ldd	r25, Z+1	; 0x01
 432:	a0 e0       	ldi	r26, 0x00	; 0
 434:	b0 e0       	ldi	r27, 0x00	; 0
 436:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 43a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 43e:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
 442:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
 446:	58 c0       	rjmp	.+176    	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
		case PRE_1024:SET_BIT(TCCR1B,CS10);CLR_BIT(TCCR1B,CS11); SET_BIT(TCCR1B,CS12);
 448:	e1 e8       	ldi	r30, 0x81	; 129
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	80 81       	ld	r24, Z
 44e:	81 60       	ori	r24, 0x01	; 1
 450:	80 83       	st	Z, r24
 452:	80 81       	ld	r24, Z
 454:	8d 7f       	andi	r24, 0xFD	; 253
 456:	80 83       	st	Z, r24
 458:	80 81       	ld	r24, Z
 45a:	84 60       	ori	r24, 0x04	; 4
 45c:	80 83       	st	Z, r24
		 ICR1=GET_FREQUENCY(1024,frequency);HOLD=ICR1;  break;
 45e:	98 01       	movw	r18, r16
 460:	40 e0       	ldi	r20, 0x00	; 0
 462:	50 e0       	ldi	r21, 0x00	; 0
 464:	60 e0       	ldi	r22, 0x00	; 0
 466:	72 e1       	ldi	r23, 0x12	; 18
 468:	8a e7       	ldi	r24, 0x7A	; 122
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 a7 04 	call	0x94e	; 0x94e <__udivmodsi4>
 470:	da 01       	movw	r26, r20
 472:	c9 01       	movw	r24, r18
 474:	07 2e       	mov	r0, r23
 476:	7b e0       	ldi	r23, 0x0B	; 11
 478:	b6 95       	lsr	r27
 47a:	a7 95       	ror	r26
 47c:	97 95       	ror	r25
 47e:	87 95       	ror	r24
 480:	7a 95       	dec	r23
 482:	d1 f7       	brne	.-12     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
 484:	70 2d       	mov	r23, r0
 486:	e6 e8       	ldi	r30, 0x86	; 134
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	91 83       	std	Z+1, r25	; 0x01
 48c:	80 83       	st	Z, r24
 48e:	91 83       	std	Z+1, r25	; 0x01
 490:	80 83       	st	Z, r24
 492:	80 81       	ld	r24, Z
 494:	91 81       	ldd	r25, Z+1	; 0x01
 496:	a0 e0       	ldi	r26, 0x00	; 0
 498:	b0 e0       	ldi	r27, 0x00	; 0
 49a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 49e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 4a2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
 4a6:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
 4aa:	26 c0       	rjmp	.+76     	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
		
		//PRESCALE OF /8
		default:CLR_BIT(TCCR1B,CS10);SET_BIT(TCCR1B,CS11); CLR_BIT(TCCR1B,CS12); ICR1=GET_FREQUENCY(8,frequency) ; HOLD=ICR1; break;
 4ac:	e1 e8       	ldi	r30, 0x81	; 129
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	80 81       	ld	r24, Z
 4b2:	8e 7f       	andi	r24, 0xFE	; 254
 4b4:	80 83       	st	Z, r24
 4b6:	80 81       	ld	r24, Z
 4b8:	82 60       	ori	r24, 0x02	; 2
 4ba:	80 83       	st	Z, r24
 4bc:	80 81       	ld	r24, Z
 4be:	8b 7f       	andi	r24, 0xFB	; 251
 4c0:	80 83       	st	Z, r24
 4c2:	98 01       	movw	r18, r16
 4c4:	40 e0       	ldi	r20, 0x00	; 0
 4c6:	50 e0       	ldi	r21, 0x00	; 0
 4c8:	60 e2       	ldi	r22, 0x20	; 32
 4ca:	71 ea       	ldi	r23, 0xA1	; 161
 4cc:	87 e0       	ldi	r24, 0x07	; 7
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	0e 94 a7 04 	call	0x94e	; 0x94e <__udivmodsi4>
 4d4:	e6 e8       	ldi	r30, 0x86	; 134
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	31 83       	std	Z+1, r19	; 0x01
 4da:	20 83       	st	Z, r18
 4dc:	31 83       	std	Z+1, r19	; 0x01
 4de:	20 83       	st	Z, r18
 4e0:	80 81       	ld	r24, Z
 4e2:	91 81       	ldd	r25, Z+1	; 0x01
 4e4:	a0 e0       	ldi	r26, 0x00	; 0
 4e6:	b0 e0       	ldi	r27, 0x00	; 0
 4e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 4ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 4f0:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <_edata+0x2>
 4f4:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <_edata+0x3>
		
		
	}
	//fO R ENABLING INTERRUPTS 
		INTERRUPT_INI();
 4f8:	0e 94 33 01 	call	0x266	; 0x266 <INTERRUPT_INI>
	

		
}
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	1f 91       	pop	r17
 502:	0f 91       	pop	r16
 504:	08 95       	ret

00000506 <GENERATE_WAVEA>:
}

	
void GENERATE_WAVEA(uint8_t DUTY_CYLCE,uint8_t OUTPUT_MODE)
{ 
	switch (OUTPUT_MODE)
 506:	66 23       	and	r22, r22
 508:	19 f0       	breq	.+6      	; 0x510 <GENERATE_WAVEA+0xa>
 50a:	61 30       	cpi	r22, 0x01	; 1
 50c:	09 f1       	breq	.+66     	; 0x550 <GENERATE_WAVEA+0x4a>
 50e:	44 c0       	rjmp	.+136    	; 0x598 <GENERATE_WAVEA+0x92>
	{
		case NON_INVERTED: CLR_BIT(TCCR1A,COM1A0); SET_BIT(TCCR1A,COM1A1);
 510:	e0 e8       	ldi	r30, 0x80	; 128
 512:	f0 e0       	ldi	r31, 0x00	; 0
 514:	90 81       	ld	r25, Z
 516:	9f 7b       	andi	r25, 0xBF	; 191
 518:	90 83       	st	Z, r25
 51a:	90 81       	ld	r25, Z
 51c:	90 68       	ori	r25, 0x80	; 128
 51e:	90 83       	st	Z, r25
    	OCR1A=(((ICR1*DUTY_CYLCE)/100));
 520:	40 91 86 00 	lds	r20, 0x0086	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
 524:	50 91 87 00 	lds	r21, 0x0087	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 528:	84 9f       	mul	r24, r20
 52a:	90 01       	movw	r18, r0
 52c:	85 9f       	mul	r24, r21
 52e:	30 0d       	add	r19, r0
 530:	11 24       	eor	r1, r1
 532:	36 95       	lsr	r19
 534:	27 95       	ror	r18
 536:	36 95       	lsr	r19
 538:	27 95       	ror	r18
 53a:	ab e7       	ldi	r26, 0x7B	; 123
 53c:	b4 e1       	ldi	r27, 0x14	; 20
 53e:	0e 94 c9 04 	call	0x992	; 0x992 <__umulhisi3>
 542:	96 95       	lsr	r25
 544:	87 95       	ror	r24
 546:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 54a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
		break;
 54e:	08 95       	ret
		
		case INVERTED:SET_BIT(TCCR1A,COM1A0); SET_BIT(TCCR1A,COM1A1);
 550:	e0 e8       	ldi	r30, 0x80	; 128
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	90 81       	ld	r25, Z
 556:	90 64       	ori	r25, 0x40	; 64
 558:	90 83       	st	Z, r25
 55a:	90 81       	ld	r25, Z
 55c:	90 68       	ori	r25, 0x80	; 128
 55e:	90 83       	st	Z, r25
			OCR1A=(ICR1-((ICR1*DUTY_CYLCE)/100));  break;
 560:	e6 e8       	ldi	r30, 0x86	; 134
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	40 81       	ld	r20, Z
 566:	51 81       	ldd	r21, Z+1	; 0x01
 568:	60 81       	ld	r22, Z
 56a:	71 81       	ldd	r23, Z+1	; 0x01
 56c:	86 9f       	mul	r24, r22
 56e:	90 01       	movw	r18, r0
 570:	87 9f       	mul	r24, r23
 572:	30 0d       	add	r19, r0
 574:	11 24       	eor	r1, r1
 576:	36 95       	lsr	r19
 578:	27 95       	ror	r18
 57a:	36 95       	lsr	r19
 57c:	27 95       	ror	r18
 57e:	ab e7       	ldi	r26, 0x7B	; 123
 580:	b4 e1       	ldi	r27, 0x14	; 20
 582:	0e 94 c9 04 	call	0x992	; 0x992 <__umulhisi3>
 586:	96 95       	lsr	r25
 588:	87 95       	ror	r24
 58a:	48 1b       	sub	r20, r24
 58c:	59 0b       	sbc	r21, r25
 58e:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 592:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 596:	08 95       	ret
		// INVERTED as default
		default:SET_BIT(TCCR1A,COM1A0); SET_BIT(TCCR1A,COM1A1); 
 598:	e0 e8       	ldi	r30, 0x80	; 128
 59a:	f0 e0       	ldi	r31, 0x00	; 0
 59c:	90 81       	ld	r25, Z
 59e:	90 64       	ori	r25, 0x40	; 64
 5a0:	90 83       	st	Z, r25
 5a2:	90 81       	ld	r25, Z
 5a4:	90 68       	ori	r25, 0x80	; 128
 5a6:	90 83       	st	Z, r25
			OCR1A=(ICR1-((ICR1*DUTY_CYLCE)/100));break;
 5a8:	e6 e8       	ldi	r30, 0x86	; 134
 5aa:	f0 e0       	ldi	r31, 0x00	; 0
 5ac:	40 81       	ld	r20, Z
 5ae:	51 81       	ldd	r21, Z+1	; 0x01
 5b0:	60 81       	ld	r22, Z
 5b2:	71 81       	ldd	r23, Z+1	; 0x01
 5b4:	86 9f       	mul	r24, r22
 5b6:	90 01       	movw	r18, r0
 5b8:	87 9f       	mul	r24, r23
 5ba:	30 0d       	add	r19, r0
 5bc:	11 24       	eor	r1, r1
 5be:	36 95       	lsr	r19
 5c0:	27 95       	ror	r18
 5c2:	36 95       	lsr	r19
 5c4:	27 95       	ror	r18
 5c6:	ab e7       	ldi	r26, 0x7B	; 123
 5c8:	b4 e1       	ldi	r27, 0x14	; 20
 5ca:	0e 94 c9 04 	call	0x992	; 0x992 <__umulhisi3>
 5ce:	96 95       	lsr	r25
 5d0:	87 95       	ror	r24
 5d2:	48 1b       	sub	r20, r24
 5d4:	59 0b       	sbc	r21, r25
 5d6:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
 5da:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
 5de:	08 95       	ret

000005e0 <__divsf3>:
 5e0:	0e 94 04 03 	call	0x608	; 0x608 <__divsf3x>
 5e4:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__fp_round>
 5e8:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__fp_pscB>
 5ec:	58 f0       	brcs	.+22     	; 0x604 <__divsf3+0x24>
 5ee:	0e 94 de 03 	call	0x7bc	; 0x7bc <__fp_pscA>
 5f2:	40 f0       	brcs	.+16     	; 0x604 <__divsf3+0x24>
 5f4:	29 f4       	brne	.+10     	; 0x600 <__divsf3+0x20>
 5f6:	5f 3f       	cpi	r21, 0xFF	; 255
 5f8:	29 f0       	breq	.+10     	; 0x604 <__divsf3+0x24>
 5fa:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__fp_inf>
 5fe:	51 11       	cpse	r21, r1
 600:	0c 94 20 04 	jmp	0x840	; 0x840 <__fp_szero>
 604:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__fp_nan>

00000608 <__divsf3x>:
 608:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fp_split3>
 60c:	68 f3       	brcs	.-38     	; 0x5e8 <__divsf3+0x8>

0000060e <__divsf3_pse>:
 60e:	99 23       	and	r25, r25
 610:	b1 f3       	breq	.-20     	; 0x5fe <__divsf3+0x1e>
 612:	55 23       	and	r21, r21
 614:	91 f3       	breq	.-28     	; 0x5fa <__divsf3+0x1a>
 616:	95 1b       	sub	r25, r21
 618:	55 0b       	sbc	r21, r21
 61a:	bb 27       	eor	r27, r27
 61c:	aa 27       	eor	r26, r26
 61e:	62 17       	cp	r22, r18
 620:	73 07       	cpc	r23, r19
 622:	84 07       	cpc	r24, r20
 624:	38 f0       	brcs	.+14     	; 0x634 <__divsf3_pse+0x26>
 626:	9f 5f       	subi	r25, 0xFF	; 255
 628:	5f 4f       	sbci	r21, 0xFF	; 255
 62a:	22 0f       	add	r18, r18
 62c:	33 1f       	adc	r19, r19
 62e:	44 1f       	adc	r20, r20
 630:	aa 1f       	adc	r26, r26
 632:	a9 f3       	breq	.-22     	; 0x61e <__divsf3_pse+0x10>
 634:	35 d0       	rcall	.+106    	; 0x6a0 <__divsf3_pse+0x92>
 636:	0e 2e       	mov	r0, r30
 638:	3a f0       	brmi	.+14     	; 0x648 <__divsf3_pse+0x3a>
 63a:	e0 e8       	ldi	r30, 0x80	; 128
 63c:	32 d0       	rcall	.+100    	; 0x6a2 <__divsf3_pse+0x94>
 63e:	91 50       	subi	r25, 0x01	; 1
 640:	50 40       	sbci	r21, 0x00	; 0
 642:	e6 95       	lsr	r30
 644:	00 1c       	adc	r0, r0
 646:	ca f7       	brpl	.-14     	; 0x63a <__divsf3_pse+0x2c>
 648:	2b d0       	rcall	.+86     	; 0x6a0 <__divsf3_pse+0x92>
 64a:	fe 2f       	mov	r31, r30
 64c:	29 d0       	rcall	.+82     	; 0x6a0 <__divsf3_pse+0x92>
 64e:	66 0f       	add	r22, r22
 650:	77 1f       	adc	r23, r23
 652:	88 1f       	adc	r24, r24
 654:	bb 1f       	adc	r27, r27
 656:	26 17       	cp	r18, r22
 658:	37 07       	cpc	r19, r23
 65a:	48 07       	cpc	r20, r24
 65c:	ab 07       	cpc	r26, r27
 65e:	b0 e8       	ldi	r27, 0x80	; 128
 660:	09 f0       	breq	.+2      	; 0x664 <__divsf3_pse+0x56>
 662:	bb 0b       	sbc	r27, r27
 664:	80 2d       	mov	r24, r0
 666:	bf 01       	movw	r22, r30
 668:	ff 27       	eor	r31, r31
 66a:	93 58       	subi	r25, 0x83	; 131
 66c:	5f 4f       	sbci	r21, 0xFF	; 255
 66e:	3a f0       	brmi	.+14     	; 0x67e <__divsf3_pse+0x70>
 670:	9e 3f       	cpi	r25, 0xFE	; 254
 672:	51 05       	cpc	r21, r1
 674:	78 f0       	brcs	.+30     	; 0x694 <__divsf3_pse+0x86>
 676:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__fp_inf>
 67a:	0c 94 20 04 	jmp	0x840	; 0x840 <__fp_szero>
 67e:	5f 3f       	cpi	r21, 0xFF	; 255
 680:	e4 f3       	brlt	.-8      	; 0x67a <__divsf3_pse+0x6c>
 682:	98 3e       	cpi	r25, 0xE8	; 232
 684:	d4 f3       	brlt	.-12     	; 0x67a <__divsf3_pse+0x6c>
 686:	86 95       	lsr	r24
 688:	77 95       	ror	r23
 68a:	67 95       	ror	r22
 68c:	b7 95       	ror	r27
 68e:	f7 95       	ror	r31
 690:	9f 5f       	subi	r25, 0xFF	; 255
 692:	c9 f7       	brne	.-14     	; 0x686 <__divsf3_pse+0x78>
 694:	88 0f       	add	r24, r24
 696:	91 1d       	adc	r25, r1
 698:	96 95       	lsr	r25
 69a:	87 95       	ror	r24
 69c:	97 f9       	bld	r25, 7
 69e:	08 95       	ret
 6a0:	e1 e0       	ldi	r30, 0x01	; 1
 6a2:	66 0f       	add	r22, r22
 6a4:	77 1f       	adc	r23, r23
 6a6:	88 1f       	adc	r24, r24
 6a8:	bb 1f       	adc	r27, r27
 6aa:	62 17       	cp	r22, r18
 6ac:	73 07       	cpc	r23, r19
 6ae:	84 07       	cpc	r24, r20
 6b0:	ba 07       	cpc	r27, r26
 6b2:	20 f0       	brcs	.+8      	; 0x6bc <__divsf3_pse+0xae>
 6b4:	62 1b       	sub	r22, r18
 6b6:	73 0b       	sbc	r23, r19
 6b8:	84 0b       	sbc	r24, r20
 6ba:	ba 0b       	sbc	r27, r26
 6bc:	ee 1f       	adc	r30, r30
 6be:	88 f7       	brcc	.-30     	; 0x6a2 <__divsf3_pse+0x94>
 6c0:	e0 95       	com	r30
 6c2:	08 95       	ret

000006c4 <__fixsfsi>:
 6c4:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__fixunssfsi>
 6c8:	68 94       	set
 6ca:	b1 11       	cpse	r27, r1
 6cc:	0c 94 20 04 	jmp	0x840	; 0x840 <__fp_szero>
 6d0:	08 95       	ret

000006d2 <__fixunssfsi>:
 6d2:	0e 94 05 04 	call	0x80a	; 0x80a <__fp_splitA>
 6d6:	88 f0       	brcs	.+34     	; 0x6fa <__fixunssfsi+0x28>
 6d8:	9f 57       	subi	r25, 0x7F	; 127
 6da:	98 f0       	brcs	.+38     	; 0x702 <__fixunssfsi+0x30>
 6dc:	b9 2f       	mov	r27, r25
 6de:	99 27       	eor	r25, r25
 6e0:	b7 51       	subi	r27, 0x17	; 23
 6e2:	b0 f0       	brcs	.+44     	; 0x710 <__fixunssfsi+0x3e>
 6e4:	e1 f0       	breq	.+56     	; 0x71e <__fixunssfsi+0x4c>
 6e6:	66 0f       	add	r22, r22
 6e8:	77 1f       	adc	r23, r23
 6ea:	88 1f       	adc	r24, r24
 6ec:	99 1f       	adc	r25, r25
 6ee:	1a f0       	brmi	.+6      	; 0x6f6 <__fixunssfsi+0x24>
 6f0:	ba 95       	dec	r27
 6f2:	c9 f7       	brne	.-14     	; 0x6e6 <__fixunssfsi+0x14>
 6f4:	14 c0       	rjmp	.+40     	; 0x71e <__fixunssfsi+0x4c>
 6f6:	b1 30       	cpi	r27, 0x01	; 1
 6f8:	91 f0       	breq	.+36     	; 0x71e <__fixunssfsi+0x4c>
 6fa:	0e 94 1f 04 	call	0x83e	; 0x83e <__fp_zero>
 6fe:	b1 e0       	ldi	r27, 0x01	; 1
 700:	08 95       	ret
 702:	0c 94 1f 04 	jmp	0x83e	; 0x83e <__fp_zero>
 706:	67 2f       	mov	r22, r23
 708:	78 2f       	mov	r23, r24
 70a:	88 27       	eor	r24, r24
 70c:	b8 5f       	subi	r27, 0xF8	; 248
 70e:	39 f0       	breq	.+14     	; 0x71e <__fixunssfsi+0x4c>
 710:	b9 3f       	cpi	r27, 0xF9	; 249
 712:	cc f3       	brlt	.-14     	; 0x706 <__fixunssfsi+0x34>
 714:	86 95       	lsr	r24
 716:	77 95       	ror	r23
 718:	67 95       	ror	r22
 71a:	b3 95       	inc	r27
 71c:	d9 f7       	brne	.-10     	; 0x714 <__fixunssfsi+0x42>
 71e:	3e f4       	brtc	.+14     	; 0x72e <__fixunssfsi+0x5c>
 720:	90 95       	com	r25
 722:	80 95       	com	r24
 724:	70 95       	com	r23
 726:	61 95       	neg	r22
 728:	7f 4f       	sbci	r23, 0xFF	; 255
 72a:	8f 4f       	sbci	r24, 0xFF	; 255
 72c:	9f 4f       	sbci	r25, 0xFF	; 255
 72e:	08 95       	ret

00000730 <__floatunsisf>:
 730:	e8 94       	clt
 732:	09 c0       	rjmp	.+18     	; 0x746 <__floatsisf+0x12>

00000734 <__floatsisf>:
 734:	97 fb       	bst	r25, 7
 736:	3e f4       	brtc	.+14     	; 0x746 <__floatsisf+0x12>
 738:	90 95       	com	r25
 73a:	80 95       	com	r24
 73c:	70 95       	com	r23
 73e:	61 95       	neg	r22
 740:	7f 4f       	sbci	r23, 0xFF	; 255
 742:	8f 4f       	sbci	r24, 0xFF	; 255
 744:	9f 4f       	sbci	r25, 0xFF	; 255
 746:	99 23       	and	r25, r25
 748:	a9 f0       	breq	.+42     	; 0x774 <__floatsisf+0x40>
 74a:	f9 2f       	mov	r31, r25
 74c:	96 e9       	ldi	r25, 0x96	; 150
 74e:	bb 27       	eor	r27, r27
 750:	93 95       	inc	r25
 752:	f6 95       	lsr	r31
 754:	87 95       	ror	r24
 756:	77 95       	ror	r23
 758:	67 95       	ror	r22
 75a:	b7 95       	ror	r27
 75c:	f1 11       	cpse	r31, r1
 75e:	f8 cf       	rjmp	.-16     	; 0x750 <__floatsisf+0x1c>
 760:	fa f4       	brpl	.+62     	; 0x7a0 <__floatsisf+0x6c>
 762:	bb 0f       	add	r27, r27
 764:	11 f4       	brne	.+4      	; 0x76a <__floatsisf+0x36>
 766:	60 ff       	sbrs	r22, 0
 768:	1b c0       	rjmp	.+54     	; 0x7a0 <__floatsisf+0x6c>
 76a:	6f 5f       	subi	r22, 0xFF	; 255
 76c:	7f 4f       	sbci	r23, 0xFF	; 255
 76e:	8f 4f       	sbci	r24, 0xFF	; 255
 770:	9f 4f       	sbci	r25, 0xFF	; 255
 772:	16 c0       	rjmp	.+44     	; 0x7a0 <__floatsisf+0x6c>
 774:	88 23       	and	r24, r24
 776:	11 f0       	breq	.+4      	; 0x77c <__floatsisf+0x48>
 778:	96 e9       	ldi	r25, 0x96	; 150
 77a:	11 c0       	rjmp	.+34     	; 0x79e <__floatsisf+0x6a>
 77c:	77 23       	and	r23, r23
 77e:	21 f0       	breq	.+8      	; 0x788 <__floatsisf+0x54>
 780:	9e e8       	ldi	r25, 0x8E	; 142
 782:	87 2f       	mov	r24, r23
 784:	76 2f       	mov	r23, r22
 786:	05 c0       	rjmp	.+10     	; 0x792 <__floatsisf+0x5e>
 788:	66 23       	and	r22, r22
 78a:	71 f0       	breq	.+28     	; 0x7a8 <__floatsisf+0x74>
 78c:	96 e8       	ldi	r25, 0x86	; 134
 78e:	86 2f       	mov	r24, r22
 790:	70 e0       	ldi	r23, 0x00	; 0
 792:	60 e0       	ldi	r22, 0x00	; 0
 794:	2a f0       	brmi	.+10     	; 0x7a0 <__floatsisf+0x6c>
 796:	9a 95       	dec	r25
 798:	66 0f       	add	r22, r22
 79a:	77 1f       	adc	r23, r23
 79c:	88 1f       	adc	r24, r24
 79e:	da f7       	brpl	.-10     	; 0x796 <__floatsisf+0x62>
 7a0:	88 0f       	add	r24, r24
 7a2:	96 95       	lsr	r25
 7a4:	87 95       	ror	r24
 7a6:	97 f9       	bld	r25, 7
 7a8:	08 95       	ret

000007aa <__fp_inf>:
 7aa:	97 f9       	bld	r25, 7
 7ac:	9f 67       	ori	r25, 0x7F	; 127
 7ae:	80 e8       	ldi	r24, 0x80	; 128
 7b0:	70 e0       	ldi	r23, 0x00	; 0
 7b2:	60 e0       	ldi	r22, 0x00	; 0
 7b4:	08 95       	ret

000007b6 <__fp_nan>:
 7b6:	9f ef       	ldi	r25, 0xFF	; 255
 7b8:	80 ec       	ldi	r24, 0xC0	; 192
 7ba:	08 95       	ret

000007bc <__fp_pscA>:
 7bc:	00 24       	eor	r0, r0
 7be:	0a 94       	dec	r0
 7c0:	16 16       	cp	r1, r22
 7c2:	17 06       	cpc	r1, r23
 7c4:	18 06       	cpc	r1, r24
 7c6:	09 06       	cpc	r0, r25
 7c8:	08 95       	ret

000007ca <__fp_pscB>:
 7ca:	00 24       	eor	r0, r0
 7cc:	0a 94       	dec	r0
 7ce:	12 16       	cp	r1, r18
 7d0:	13 06       	cpc	r1, r19
 7d2:	14 06       	cpc	r1, r20
 7d4:	05 06       	cpc	r0, r21
 7d6:	08 95       	ret

000007d8 <__fp_round>:
 7d8:	09 2e       	mov	r0, r25
 7da:	03 94       	inc	r0
 7dc:	00 0c       	add	r0, r0
 7de:	11 f4       	brne	.+4      	; 0x7e4 <__fp_round+0xc>
 7e0:	88 23       	and	r24, r24
 7e2:	52 f0       	brmi	.+20     	; 0x7f8 <__fp_round+0x20>
 7e4:	bb 0f       	add	r27, r27
 7e6:	40 f4       	brcc	.+16     	; 0x7f8 <__fp_round+0x20>
 7e8:	bf 2b       	or	r27, r31
 7ea:	11 f4       	brne	.+4      	; 0x7f0 <__fp_round+0x18>
 7ec:	60 ff       	sbrs	r22, 0
 7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <__fp_round+0x20>
 7f0:	6f 5f       	subi	r22, 0xFF	; 255
 7f2:	7f 4f       	sbci	r23, 0xFF	; 255
 7f4:	8f 4f       	sbci	r24, 0xFF	; 255
 7f6:	9f 4f       	sbci	r25, 0xFF	; 255
 7f8:	08 95       	ret

000007fa <__fp_split3>:
 7fa:	57 fd       	sbrc	r21, 7
 7fc:	90 58       	subi	r25, 0x80	; 128
 7fe:	44 0f       	add	r20, r20
 800:	55 1f       	adc	r21, r21
 802:	59 f0       	breq	.+22     	; 0x81a <__fp_splitA+0x10>
 804:	5f 3f       	cpi	r21, 0xFF	; 255
 806:	71 f0       	breq	.+28     	; 0x824 <__fp_splitA+0x1a>
 808:	47 95       	ror	r20

0000080a <__fp_splitA>:
 80a:	88 0f       	add	r24, r24
 80c:	97 fb       	bst	r25, 7
 80e:	99 1f       	adc	r25, r25
 810:	61 f0       	breq	.+24     	; 0x82a <__fp_splitA+0x20>
 812:	9f 3f       	cpi	r25, 0xFF	; 255
 814:	79 f0       	breq	.+30     	; 0x834 <__fp_splitA+0x2a>
 816:	87 95       	ror	r24
 818:	08 95       	ret
 81a:	12 16       	cp	r1, r18
 81c:	13 06       	cpc	r1, r19
 81e:	14 06       	cpc	r1, r20
 820:	55 1f       	adc	r21, r21
 822:	f2 cf       	rjmp	.-28     	; 0x808 <__fp_split3+0xe>
 824:	46 95       	lsr	r20
 826:	f1 df       	rcall	.-30     	; 0x80a <__fp_splitA>
 828:	08 c0       	rjmp	.+16     	; 0x83a <__fp_splitA+0x30>
 82a:	16 16       	cp	r1, r22
 82c:	17 06       	cpc	r1, r23
 82e:	18 06       	cpc	r1, r24
 830:	99 1f       	adc	r25, r25
 832:	f1 cf       	rjmp	.-30     	; 0x816 <__fp_splitA+0xc>
 834:	86 95       	lsr	r24
 836:	71 05       	cpc	r23, r1
 838:	61 05       	cpc	r22, r1
 83a:	08 94       	sec
 83c:	08 95       	ret

0000083e <__fp_zero>:
 83e:	e8 94       	clt

00000840 <__fp_szero>:
 840:	bb 27       	eor	r27, r27
 842:	66 27       	eor	r22, r22
 844:	77 27       	eor	r23, r23
 846:	cb 01       	movw	r24, r22
 848:	97 f9       	bld	r25, 7
 84a:	08 95       	ret

0000084c <__mulsf3>:
 84c:	0e 94 39 04 	call	0x872	; 0x872 <__mulsf3x>
 850:	0c 94 ec 03 	jmp	0x7d8	; 0x7d8 <__fp_round>
 854:	0e 94 de 03 	call	0x7bc	; 0x7bc <__fp_pscA>
 858:	38 f0       	brcs	.+14     	; 0x868 <__mulsf3+0x1c>
 85a:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__fp_pscB>
 85e:	20 f0       	brcs	.+8      	; 0x868 <__mulsf3+0x1c>
 860:	95 23       	and	r25, r21
 862:	11 f0       	breq	.+4      	; 0x868 <__mulsf3+0x1c>
 864:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__fp_inf>
 868:	0c 94 db 03 	jmp	0x7b6	; 0x7b6 <__fp_nan>
 86c:	11 24       	eor	r1, r1
 86e:	0c 94 20 04 	jmp	0x840	; 0x840 <__fp_szero>

00000872 <__mulsf3x>:
 872:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__fp_split3>
 876:	70 f3       	brcs	.-36     	; 0x854 <__mulsf3+0x8>

00000878 <__mulsf3_pse>:
 878:	95 9f       	mul	r25, r21
 87a:	c1 f3       	breq	.-16     	; 0x86c <__mulsf3+0x20>
 87c:	95 0f       	add	r25, r21
 87e:	50 e0       	ldi	r21, 0x00	; 0
 880:	55 1f       	adc	r21, r21
 882:	62 9f       	mul	r22, r18
 884:	f0 01       	movw	r30, r0
 886:	72 9f       	mul	r23, r18
 888:	bb 27       	eor	r27, r27
 88a:	f0 0d       	add	r31, r0
 88c:	b1 1d       	adc	r27, r1
 88e:	63 9f       	mul	r22, r19
 890:	aa 27       	eor	r26, r26
 892:	f0 0d       	add	r31, r0
 894:	b1 1d       	adc	r27, r1
 896:	aa 1f       	adc	r26, r26
 898:	64 9f       	mul	r22, r20
 89a:	66 27       	eor	r22, r22
 89c:	b0 0d       	add	r27, r0
 89e:	a1 1d       	adc	r26, r1
 8a0:	66 1f       	adc	r22, r22
 8a2:	82 9f       	mul	r24, r18
 8a4:	22 27       	eor	r18, r18
 8a6:	b0 0d       	add	r27, r0
 8a8:	a1 1d       	adc	r26, r1
 8aa:	62 1f       	adc	r22, r18
 8ac:	73 9f       	mul	r23, r19
 8ae:	b0 0d       	add	r27, r0
 8b0:	a1 1d       	adc	r26, r1
 8b2:	62 1f       	adc	r22, r18
 8b4:	83 9f       	mul	r24, r19
 8b6:	a0 0d       	add	r26, r0
 8b8:	61 1d       	adc	r22, r1
 8ba:	22 1f       	adc	r18, r18
 8bc:	74 9f       	mul	r23, r20
 8be:	33 27       	eor	r19, r19
 8c0:	a0 0d       	add	r26, r0
 8c2:	61 1d       	adc	r22, r1
 8c4:	23 1f       	adc	r18, r19
 8c6:	84 9f       	mul	r24, r20
 8c8:	60 0d       	add	r22, r0
 8ca:	21 1d       	adc	r18, r1
 8cc:	82 2f       	mov	r24, r18
 8ce:	76 2f       	mov	r23, r22
 8d0:	6a 2f       	mov	r22, r26
 8d2:	11 24       	eor	r1, r1
 8d4:	9f 57       	subi	r25, 0x7F	; 127
 8d6:	50 40       	sbci	r21, 0x00	; 0
 8d8:	9a f0       	brmi	.+38     	; 0x900 <__stack+0x1>
 8da:	f1 f0       	breq	.+60     	; 0x918 <__stack+0x19>
 8dc:	88 23       	and	r24, r24
 8de:	4a f0       	brmi	.+18     	; 0x8f2 <__mulsf3_pse+0x7a>
 8e0:	ee 0f       	add	r30, r30
 8e2:	ff 1f       	adc	r31, r31
 8e4:	bb 1f       	adc	r27, r27
 8e6:	66 1f       	adc	r22, r22
 8e8:	77 1f       	adc	r23, r23
 8ea:	88 1f       	adc	r24, r24
 8ec:	91 50       	subi	r25, 0x01	; 1
 8ee:	50 40       	sbci	r21, 0x00	; 0
 8f0:	a9 f7       	brne	.-22     	; 0x8dc <__mulsf3_pse+0x64>
 8f2:	9e 3f       	cpi	r25, 0xFE	; 254
 8f4:	51 05       	cpc	r21, r1
 8f6:	80 f0       	brcs	.+32     	; 0x918 <__stack+0x19>
 8f8:	0c 94 d5 03 	jmp	0x7aa	; 0x7aa <__fp_inf>
 8fc:	0c 94 20 04 	jmp	0x840	; 0x840 <__fp_szero>
 900:	5f 3f       	cpi	r21, 0xFF	; 255
 902:	e4 f3       	brlt	.-8      	; 0x8fc <__mulsf3_pse+0x84>
 904:	98 3e       	cpi	r25, 0xE8	; 232
 906:	d4 f3       	brlt	.-12     	; 0x8fc <__mulsf3_pse+0x84>
 908:	86 95       	lsr	r24
 90a:	77 95       	ror	r23
 90c:	67 95       	ror	r22
 90e:	b7 95       	ror	r27
 910:	f7 95       	ror	r31
 912:	e7 95       	ror	r30
 914:	9f 5f       	subi	r25, 0xFF	; 255
 916:	c1 f7       	brne	.-16     	; 0x908 <__stack+0x9>
 918:	fe 2b       	or	r31, r30
 91a:	88 0f       	add	r24, r24
 91c:	91 1d       	adc	r25, r1
 91e:	96 95       	lsr	r25
 920:	87 95       	ror	r24
 922:	97 f9       	bld	r25, 7
 924:	08 95       	ret

00000926 <__udivmodhi4>:
 926:	aa 1b       	sub	r26, r26
 928:	bb 1b       	sub	r27, r27
 92a:	51 e1       	ldi	r21, 0x11	; 17
 92c:	07 c0       	rjmp	.+14     	; 0x93c <__udivmodhi4_ep>

0000092e <__udivmodhi4_loop>:
 92e:	aa 1f       	adc	r26, r26
 930:	bb 1f       	adc	r27, r27
 932:	a6 17       	cp	r26, r22
 934:	b7 07       	cpc	r27, r23
 936:	10 f0       	brcs	.+4      	; 0x93c <__udivmodhi4_ep>
 938:	a6 1b       	sub	r26, r22
 93a:	b7 0b       	sbc	r27, r23

0000093c <__udivmodhi4_ep>:
 93c:	88 1f       	adc	r24, r24
 93e:	99 1f       	adc	r25, r25
 940:	5a 95       	dec	r21
 942:	a9 f7       	brne	.-22     	; 0x92e <__udivmodhi4_loop>
 944:	80 95       	com	r24
 946:	90 95       	com	r25
 948:	bc 01       	movw	r22, r24
 94a:	cd 01       	movw	r24, r26
 94c:	08 95       	ret

0000094e <__udivmodsi4>:
 94e:	a1 e2       	ldi	r26, 0x21	; 33
 950:	1a 2e       	mov	r1, r26
 952:	aa 1b       	sub	r26, r26
 954:	bb 1b       	sub	r27, r27
 956:	fd 01       	movw	r30, r26
 958:	0d c0       	rjmp	.+26     	; 0x974 <__udivmodsi4_ep>

0000095a <__udivmodsi4_loop>:
 95a:	aa 1f       	adc	r26, r26
 95c:	bb 1f       	adc	r27, r27
 95e:	ee 1f       	adc	r30, r30
 960:	ff 1f       	adc	r31, r31
 962:	a2 17       	cp	r26, r18
 964:	b3 07       	cpc	r27, r19
 966:	e4 07       	cpc	r30, r20
 968:	f5 07       	cpc	r31, r21
 96a:	20 f0       	brcs	.+8      	; 0x974 <__udivmodsi4_ep>
 96c:	a2 1b       	sub	r26, r18
 96e:	b3 0b       	sbc	r27, r19
 970:	e4 0b       	sbc	r30, r20
 972:	f5 0b       	sbc	r31, r21

00000974 <__udivmodsi4_ep>:
 974:	66 1f       	adc	r22, r22
 976:	77 1f       	adc	r23, r23
 978:	88 1f       	adc	r24, r24
 97a:	99 1f       	adc	r25, r25
 97c:	1a 94       	dec	r1
 97e:	69 f7       	brne	.-38     	; 0x95a <__udivmodsi4_loop>
 980:	60 95       	com	r22
 982:	70 95       	com	r23
 984:	80 95       	com	r24
 986:	90 95       	com	r25
 988:	9b 01       	movw	r18, r22
 98a:	ac 01       	movw	r20, r24
 98c:	bd 01       	movw	r22, r26
 98e:	cf 01       	movw	r24, r30
 990:	08 95       	ret

00000992 <__umulhisi3>:
 992:	a2 9f       	mul	r26, r18
 994:	b0 01       	movw	r22, r0
 996:	b3 9f       	mul	r27, r19
 998:	c0 01       	movw	r24, r0
 99a:	a3 9f       	mul	r26, r19
 99c:	70 0d       	add	r23, r0
 99e:	81 1d       	adc	r24, r1
 9a0:	11 24       	eor	r1, r1
 9a2:	91 1d       	adc	r25, r1
 9a4:	b2 9f       	mul	r27, r18
 9a6:	70 0d       	add	r23, r0
 9a8:	81 1d       	adc	r24, r1
 9aa:	11 24       	eor	r1, r1
 9ac:	91 1d       	adc	r25, r1
 9ae:	08 95       	ret

000009b0 <_exit>:
 9b0:	f8 94       	cli

000009b2 <__stop_program>:
 9b2:	ff cf       	rjmp	.-2      	; 0x9b2 <__stop_program>
